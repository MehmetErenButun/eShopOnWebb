@inject ILogger<Details> Logger
@inject IJSRuntime JSRuntime
@inject IOrderService OrderService

@inherits BlazorAdmin.Helpers.BlazorComponent

@namespace BlazorAdmin.Pages.OrdersPage

<div class="modal @_modalClass" tabindex="-1" role="dialog" style="display:@_modalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
      
                @if (_item == null)
                {
                    <Spinner></Spinner>
                }
                else
                {
                    <div class="container">
                        <div class="row">
      
                            <dl>
                                @foreach (var item in _item)
                                {
                                    <dt>
                                        Product Name
                                    </dt>
                                    <dd>
                                        @item.ItemOrdered.ProductName
                                    </dd>
                                    <dt>
                                        Unit
                                    </dt>
                                    <dd>
                                        @item.Units
                                    </dd>
                                    <dt>
                                        Unit Price
                                    </dt>
                                    <dd>
                                        @item.UnitPrice
                                    </dd>
                                    <hr/>
                                         
                                }
                                     
                            </dl>
                        </div>
      
                    </div>
                }
      
            </div>
              <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="Close">Cancel</button>
                            @if (_status)
                            {
                                <button class="btn btn-danger" @onclick="() => ChangeStatusClick(_id)">
                                    Pending
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-danger" @onclick="() => ChangeStatusClick(_id)">
                                    Approved
                                </button>
                            }
                        </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IEnumerable<OrderItem> OrderItems { get; set; }

    [Parameter]
    public EventCallback<int> OnDetailClick { get; set; }
    
    private string _modalDisplay = "none;";
    private string _modalClass = "";
    private bool _showDetailsModal = false;
    private List<OrderItem> _item = new List<OrderItem>();
    private int _id;
    private bool _status;
    
    [Parameter]
    public EventCallback<string> OnSaveClick { get; set; }
    
    public async Task Open(int id,bool status)
    {

        Logger.LogInformation("Now loading... /order/Details/{Id}", id);

        await new Css(JSRuntime).HideBodyOverflow();

        _item = await OrderService.GetById(id);

        _id = id;
        _status = status;
        
        _modalDisplay = "block;";
        _modalClass = "Show";
        _showDetailsModal = true;

        StateHasChanged();
    }
    
    private async Task ChangeStatusClick(int id)
    {
        // TODO: Add some kind of "are you sure" check before this

        var req = new ChangeStatusOrderRequest();
        req.OrderId = id;
        await OrderService.ChangeStatus(req);
        
        await OnSaveClick.InvokeAsync(null);
        await Close();
    }

    public async Task Close()
    {
        await new Css(JSRuntime).ShowBodyOverflow();

        _modalDisplay = "none";
        _modalClass = "";
        _showDetailsModal = false;
    }

}
